// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250617043438_Them_Bang_Va_Data")]
    partial class Them_Bang_Va_Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("roleId");

                    b.ToTable("roleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "5c25fc53-d1be-4471-8fa5-a1671f6fba4e",
                            roleName = "Admin"
                        },
                        new
                        {
                            roleId = "b71cb82f-c4b7-489d-b504-0af5a2143839",
                            roleName = "User"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("loginUserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("loginUserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("userPoint")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.ToTable("userInformation");

                    b.HasData(
                        new
                        {
                            userId = "f79ee79f-28c0-4e54-924b-078e3c97f891",
                            IdentityCode = "123456789012",
                            dateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "admin@example.com",
                            loginUserPassword = "hashed_password_admin",
                            phoneNumber = "0123456789",
                            userName = "Admin User",
                            userPoint = 1000
                        },
                        new
                        {
                            userId = "7bdc0265-eda3-4819-b6c7-44bb7b3c8324",
                            IdentityCode = "987654321098",
                            dateOfBirth = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            loginUserEmail = "user@example.com",
                            loginUserPassword = "hashed_password_user",
                            phoneNumber = "0987654321",
                            userName = "Regular User",
                            userPoint = 50
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("roleId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("userRoleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "5c25fc53-d1be-4471-8fa5-a1671f6fba4e",
                            userId = "f79ee79f-28c0-4e54-924b-078e3c97f891"
                        },
                        new
                        {
                            roleId = "b71cb82f-c4b7-489d-b504-0af5a2143839",
                            userId = "7bdc0265-eda3-4819-b6c7-44bb7b3c8324"
                        });
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isPay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("totalAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("orderId");

                    b.HasIndex("userId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.HasKey("orderId", "foodInformationId");

                    b.HasIndex("foodInformationId");

                    b.ToTable("FoodOrderDetail");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieScheduleID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("seatsId", "movieScheduleID");

                    b.HasIndex("movieScheduleID");

                    b.HasIndex("orderId");

                    b.HasIndex("priceInformationId");

                    b.ToTable("TicketOrderDetail");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isMiddle")
                        .HasColumnType("bit");

                    b.Property<bool>("isTaken")
                        .HasColumnType("bit");

                    b.Property<string>("seatsNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("seatsId");

                    b.HasIndex("cinemaRoomId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            seatsId = "e49f06f3-3a31-4ae9-9d94-4582d967b3c6",
                            cinemaRoomId = "a2ef3f7a-54a9-4efe-a333-f0a855d5abfe",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A1"
                        },
                        new
                        {
                            seatsId = "08ea1f90-cbff-48aa-af6a-0b8c4c08b20f",
                            cinemaRoomId = "a2ef3f7a-54a9-4efe-a333-f0a855d5abfe",
                            isMiddle = true,
                            isTaken = false,
                            seatsNumber = "A2"
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Property<string>("cinemaRoomId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("cinemaRoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("isIMAXRoom")
                        .HasColumnType("bit");

                    b.HasKey("cinemaRoomId");

                    b.HasIndex("cinemaId");

                    b.ToTable("cinemaRoom");

                    b.HasData(
                        new
                        {
                            cinemaRoomId = "a2ef3f7a-54a9-4efe-a333-f0a855d5abfe",
                            cinemaId = "46dca9e7-8908-4197-ad5a-62bfb3a36b69",
                            cinemaRoomNumber = 1,
                            isIMAXRoom = true
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.Property<string>("roomID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("staffID")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("startedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("endedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("userInformationuserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("roomID", "staffID", "startedTime");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("userInformationuserId");

                    b.ToTable("cleaningStatus");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaContactHotlineNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("cinemaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinemaLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("cinemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isSupportedIMAX")
                        .HasColumnType("bit");

                    b.HasKey("cinemaId");

                    b.ToTable("Cinema");

                    b.HasData(
                        new
                        {
                            cinemaId = "46dca9e7-8908-4197-ad5a-62bfb3a36b69",
                            cinemaContactHotlineNumber = "0901234567",
                            cinemaDescription = "Rạp chiếu phim hiện đại với nhiều phòng chiếu.",
                            cinemaLocation = "123 Đường XYZ, TP.HCM",
                            cinemaName = "Rạp Chiếu Phim ABC",
                            isSupportedIMAX = true
                        });
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("cinemaId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("cinemaMovieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Property<string>("languageId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("languageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            languageId = "08e9c967-ccde-4dec-bacd-7f01fd436ab6",
                            languageDetail = "Vietnamese"
                        },
                        new
                        {
                            languageId = "6c98121f-996d-47dd-87cd-bbbfbde65297",
                            languageDetail = "English"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userCommentDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("movieId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("movieCommentDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenre", b =>
                {
                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("movieGenreId");

                    b.ToTable("movieGenre");

                    b.HasData(
                        new
                        {
                            movieGenreId = "98d96966-c652-4853-a3f8-7372dd364038",
                            movieGenreName = "Action"
                        },
                        new
                        {
                            movieGenreId = "b820a293-a738-4bdf-b820-6c068f8b2dad",
                            movieGenreName = "Comedy"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieGenreId");

                    b.HasIndex("movieGenreId");

                    b.ToTable("movieGenreInformation");

                    b.HasData(
                        new
                        {
                            movieId = "fc9bc591-7b0b-40b7-80ae-12046d37dde0",
                            movieGenreId = "98d96966-c652-4853-a3f8-7372dd364038"
                        },
                        new
                        {
                            movieId = "74e9884f-ed04-4de1-9ead-abd18a4cc159",
                            movieGenreId = "b820a293-a738-4bdf-b820-6c068f8b2dad"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieActor")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("movieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("movieDirector")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("movieDuration")
                        .HasColumnType("int");

                    b.Property<byte[]>("movieImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("movieTrailerUrl")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.HasKey("movieId");

                    b.HasIndex("languageId");

                    b.ToTable("movieInformation");

                    b.HasData(
                        new
                        {
                            movieId = "fc9bc591-7b0b-40b7-80ae-12046d37dde0",
                            languageId = "08e9c967-ccde-4dec-bacd-7f01fd436ab6",
                            movieActor = "Diễn Viên X, Diễn Viên Y",
                            movieDescription = "Đây là một bộ phim hành động đầy kịch tính.",
                            movieDirector = "Đạo Diễn A",
                            movieDuration = 120,
                            movieImage = new byte[] { 1, 2, 3 },
                            movieName = "Phim Hành Động 1",
                            movieTrailerUrl = "http://trailer.com/phimhanhdong1"
                        },
                        new
                        {
                            movieId = "74e9884f-ed04-4de1-9ead-abd18a4cc159",
                            languageId = "6c98121f-996d-47dd-87cd-bbbfbde65297",
                            movieActor = "Actor Z, Actress W",
                            movieDescription = "A funny movie for the whole family.",
                            movieDirector = "Director B",
                            movieDuration = 90,
                            movieImage = new byte[] { 4, 5, 6 },
                            movieName = "Comedy Film 1",
                            movieTrailerUrl = "http://trailer.com/comedyfilm1"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Property<string>("movieScheduleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DayInWeekendScheduleID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HourScheduleID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieScheduleId");

                    b.HasIndex("DayInWeekendScheduleID");

                    b.HasIndex("HourScheduleID");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("movieId");

                    b.ToTable("movieSchedule");

                    b.HasData(
                        new
                        {
                            movieScheduleId = "f697a84e-2cf3-47e5-a325-ff5a71b1e749",
                            DayInWeekendScheduleID = "da05eb63-bc89-46c7-a8df-0b2f5a549507",
                            HourScheduleID = "85c1d103-959c-4f42-a898-2bb87823847a",
                            IsDelete = false,
                            cinemaRoomId = "a2ef3f7a-54a9-4efe-a333-f0a855d5abfe",
                            movieId = "fc9bc591-7b0b-40b7-80ae-12046d37dde0"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("movieVisualFormatId");

                    b.ToTable("movieVisualFormat");

                    b.HasData(
                        new
                        {
                            movieVisualFormatId = "fb7a3a1b-30c3-4f34-842e-049f2546f9fe",
                            movieVisualFormatName = "2D"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormatDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieVisualFormatId");

                    b.HasIndex("movieVisualFormatId");

                    b.ToTable("movieVisualFormatDetails");
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<long>("priceAmount")
                        .HasColumnType("bigint");

                    b.HasKey("priceInformationId");

                    b.ToTable("priceInformation");

                    b.HasData(
                        new
                        {
                            priceInformationId = "cfa7fd70-ae90-4d89-a390-6b4a3b9a3dcf",
                            priceAmount = 80000L
                        });
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationID")
                        .HasColumnType("varchar(100)");

                    b.HasKey("userTypeId", "movieVisualFormatId", "priceInformationID");

                    b.HasIndex("movieVisualFormatId");

                    b.HasIndex("priceInformationID");

                    b.ToTable("priceInformationForEachUserFilmType");

                    b.HasData(
                        new
                        {
                            userTypeId = "55f825f9-ba33-491d-a38b-817274e7b366",
                            movieVisualFormatId = "fb7a3a1b-30c3-4f34-842e-049f2546f9fe",
                            priceInformationID = "cfa7fd70-ae90-4d89-a390-6b4a3b9a3dcf"
                        });
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userTypeId");

                    b.ToTable("userType");

                    b.HasData(
                        new
                        {
                            userTypeId = "55f825f9-ba33-491d-a38b-817274e7b366",
                            userTypeDescription = "Adult"
                        });
                });

            modelBuilder.Entity("backend.Model.Product.foodInformation", b =>
                {
                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("foodInformationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("foodPrice")
                        .HasColumnType("bigint");

                    b.HasKey("foodInformationId");

                    b.ToTable("foodInformation");

                    b.HasData(
                        new
                        {
                            foodInformationId = "bc91eb33-2b88-40e5-b44e-4e9131548af9",
                            foodInformationName = "Popcorn",
                            foodPrice = 50000L
                        });
                });

            modelBuilder.Entity("backend.Model.ScheduleList.DayInWeekendSchedule", b =>
                {
                    b.Property<string>("DayInWeekendScheduleID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DayInWeekendScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DayInWeekendScheduleID");

                    b.ToTable("DayInWeekendSchedule");

                    b.HasData(
                        new
                        {
                            DayInWeekendScheduleID = "da05eb63-bc89-46c7-a8df-0b2f5a549507",
                            DayInWeekendScheduleName = "Monday"
                        },
                        new
                        {
                            DayInWeekendScheduleID = "194cb350-650a-4433-966e-7ac33748b7bd",
                            DayInWeekendScheduleName = "Tuesday"
                        });
                });

            modelBuilder.Entity("backend.Model.ScheduleList.HourSchedule", b =>
                {
                    b.Property<string>("HourScheduleID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HourScheduleDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HourScheduleID");

                    b.ToTable("HourSchedule");

                    b.HasData(
                        new
                        {
                            HourScheduleID = "85c1d103-959c-4f42-a898-2bb87823847a",
                            HourScheduleDate = "08:00"
                        },
                        new
                        {
                            HourScheduleID = "66b9592b-60d3-4edc-afa9-f24e08bb7e8b",
                            HourScheduleDate = "10:00"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.HasOne("backend.Model.Auth.roleInformation", "roleInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roleInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("Order")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.HasOne("backend.Model.Product.foodInformation", "foodInformation")
                        .WithMany()
                        .HasForeignKey("foodInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("foodInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.HasOne("backend.Model.Movie.movieSchedule", "movieSchedule")
                        .WithMany("orderDetailTicket")
                        .HasForeignKey("movieScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.PriceInformation", "PriceInformation")
                        .WithMany()
                        .HasForeignKey("priceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.Seats", "Seats")
                        .WithMany()
                        .HasForeignKey("seatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PriceInformation");

                    b.Navigation("Seats");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaRoom")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cleaningStatus", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("cleaningStatus")
                        .HasForeignKey("userInformationuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Cinemas.cinemaMovieInformation", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("cinemaMovieInformation")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieGenre", "movieGenre")
                        .WithMany()
                        .HasForeignKey("movieGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany()
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieGenre");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.Language", "Language")
                        .WithMany("movieInformation")
                        .HasForeignKey("languageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.HasOne("backend.Model.ScheduleList.DayInWeekendSchedule", "DayInWeekendSchedule")
                        .WithMany("movieSchedule")
                        .HasForeignKey("DayInWeekendScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.ScheduleList.HourSchedule", "HourSchedule")
                        .WithMany("movieSchedule")
                        .HasForeignKey("HourScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("movieSchedule")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieSchedule")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayInWeekendSchedule");

                    b.Navigation("HourSchedule");

                    b.Navigation("cinemaRoom");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormatDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieVisualFormatDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("movieVisualFormatDetail")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("priceInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.PriceInformation", "PriceInformation")
                        .WithMany("priceInformationForEachUserFilmType")
                        .HasForeignKey("priceInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.userType", "userType")
                        .WithMany("priceInformation")
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceInformation");

                    b.Navigation("movieVisualFormat");

                    b.Navigation("userType");
                });

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("cleaningStatus");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Navigation("cinemaMovieInformation");

                    b.Navigation("movieCommentDetail");

                    b.Navigation("movieSchedule");

                    b.Navigation("movieVisualFormatDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Navigation("orderDetailTicket");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Navigation("movieVisualFormatDetail");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Navigation("priceInformationForEachUserFilmType");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.ScheduleList.DayInWeekendSchedule", b =>
                {
                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.ScheduleList.HourSchedule", b =>
                {
                    b.Navigation("movieSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
